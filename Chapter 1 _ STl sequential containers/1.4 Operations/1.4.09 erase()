
1.4.9 erase()
https://education.cppinstitute.org/course_datas/display/81/413#


#include <iostream>
#include <vector>
#include <deque>
#include <list>

using namespace std;

template <class T>
void print(const T &start, const T &finish)
{
    T it;
    for(it = start; it!= finish; ++it)
    {

            cout<<*it<<", ";

    }

    cout<<endl;
}


int main()
{
    int a[] = {1,2,3,4,5,6,7,8,9,10};

    vector <int> v(a,a+10);
    deque <int> d(a,a+10);
    list <int> l(a,a+10);

    print(v.begin(), v.end());
    print(d.begin(), d.end());
    print(l.begin(), l.end());
    cout<<"Size (vector, deque, list) before erase: "<<v.size()<<"\t"<<d.size()<<"\t"<<l.size()<<"\n";

    cout<<"ereasing 1 elements in the point of position: \n";
    v.erase(v.begin()+3);
    d.erase(d.begin()+3);
    //no random access iterator
    list<int>::iterator it = l.begin();
    for(int i=1; i<=3;++i)
    { ++ it; }
    it= l.erase(it);

    print(v.begin(), v.end());
    print(d.begin(), d.end());
    print(l.begin(), l.end());
    cout<<"Size (vector, deque, list) after erase: "<<v.size()<<"\t"<<d.size()<<"\t"<<l.size()<<"\n";

    cout<<"ereasing a range of elements: \n";
    v.erase(v.begin()+3, v.end());
    d.erase(d.begin()+3,d.end());
    l.erase(it,l.end());

    print(v.begin(), v.end());
    print(d.begin(), d.end());
    print(l.begin(), l.end());
    cout<<"Size (vector, deque, list) after erase: "<<v.size()<<"\t"<<d.size()<<"\t"<<l.size()<<"\n";

    return 0;
}

Console output:
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10
Ereasing elements:
1 2 3 5 6 7 8 9 10
1 2 3 5 6 7 8 9 10
1 2 3 5 6 7 8 9 10
Ereasing elements:
1 2 3
1 2 3
1 2 3
